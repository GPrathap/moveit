<?xml version="1.0"?>
<launch>
    
    <!-- By default, we do not start a database (it can be large) -->
    <arg name="db" default="false" />
    
    <!--&lt;!&ndash; hardware_interface to use : PositionJointInterface, EffortJointInterface, VelocityJointInterface. &ndash;&gt;-->
    <!--<arg name="hardware_interface" default="PositionJointInterface"/>-->
    <!--&lt;!&ndash; name of the iiwa to use, useful in case of multiple robots. Every robot is gonna have its nodees/topics under a namespace with the same name. &ndash;&gt;-->
    <!--<arg name="robot_name" default="iiwa"/>-->


    <!-- Model of the iiwa to use : iiwa7, iiwa14 -->
    <!--<arg name="model" default="iiwa7"/>-->
    
    <!-- By default, we are not in debug mode -->
    <!--<arg name="debug" default="false" />-->
    <!---->
    <!--<remap from="robot_description" to="/$(arg robot_name)/robot_description" /> -->
    <!--<remap from="/move_group/fake_controller_joint_states" to="/$(arg robot_name)/move_group/fake_controller_joint_states" /> -->
    <!--<remap from="/get_planning_scene" to="/$(arg robot_name)/get_planning_scene" />-->

    <arg name="camera_name" default="pylon_camera"/>
    <arg name="model_robot" default="dd_robot" />
    <arg name="mobile_robot" default="ploto_robot" />
    <arg name="gui" default="True" />

    <!-- set these parameters on Parameter Server -->
    <param name="plato_robot_description"  command="$(find xacro)/xacro --inorder '$(find plato_description)/urdf/plato.xacro'"/>
    <param name="plato_ball_robot_description"  textfile='$(find iiwa_moveit)/urdf/ball.urdf'/>
    <param name="use_gui" value="$(arg gui)"/>


    <group ns="$(arg model_robot)">
        <!-- Start 3 nodes: joint_state_publisher, robot_state_publisher and rviz -->
        <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher" />

    </group>

    <!---->
    <!--&lt;!&ndash;Put in a namespace to allow many instances to run&ndash;&gt;-->
    <!--<group ns="$(arg robot_name)" >-->
        <!---->
        <!--&lt;!&ndash; We do not have a robot connected, so publish fake joint states &ndash;&gt;-->
        <!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" output="screen">-->
            <!--<param name="use_gui" value="false"/> -->
            <!--<rosparam param="source_list">["/move_group/fake_controller_joint_states"]</rosparam>-->
        <!--</node>-->
        <!---->
        <!--&lt;!&ndash; Given the published joint states, publish tf for the robot links &ndash;&gt;-->
        <!--<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />-->
        <!---->
        <!--&lt;!&ndash; Load move_group &ndash;&gt;-->
        <!--<include file="$(find iiwa_moveit)/launch/move_group.launch">-->
            <!--<arg name="publish_monitored_planning_scene" value="true" />-->
            <!--<arg name="fake_execution" value="true"/>-->
            <!--<arg name="hardware_interface" value="$(arg hardware_interface)"/>-->
            <!--<arg name="robot_name" value="$(arg robot_name)"/>-->
            <!--<arg name="model" value="$(arg model)" />-->
        <!--</include>-->
        <!---->
        <!--&lt;!&ndash; Run Rviz and load the default config to see the state of the move_group node &ndash;&gt;-->
        <!--<include file="$(find iiwa_moveit)/launch/moveit_rviz.launch">-->
            <!--<arg name="config" value="true"/>-->
            <!--<arg name="debug" value="$(arg debug)"/>-->
        <!--</include>-->
        <!---->
        <!--&lt;!&ndash; If database loading was enabled, start mongodb as well &ndash;&gt;-->
        <!--<include file="$(find iiwa_moveit)/launch/default_warehouse_db.launch" if="$(arg db)"/>-->
    <!--</group>-->




    <!-- The planning and execution components of MoveIt! configured to run -->
    <!-- using the ROS-Industrial interface. -->

    <!-- | 		PARAMETERS  		| -->
    <!-- the "sim" argument controls whether we connect to a Simulated or Real robot. -->
    <arg name="sim" default="false" doc="If true, the robot will be simulated in Gazebo" />
    <!-- hardware_interface to use : PositionJointInterface, EffortJointInterface, VelocityJointInterface. -->
    <arg name="hardware_interface" default="PositionJointInterface"/>
    <!-- The is gonna have its nodes/topics under a namespace with the same name. -->
    <arg name="robot_name" default="iiwa"/>
    <!-- Model of the iiwa to use : iiwa7, iiwa14 -->
    <arg name="model" default="iiwa14"/>
    <arg name="rviz" default="true" />

    <remap from="/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory"
           to="/$(arg robot_name)/$(arg hardware_interface)_trajectory_controller/follow_joint_trajectory" />
    <remap from="robot_description" to="/$(arg robot_name)/robot_description" />
    <remap from="/get_planning_scene" to="/$(arg robot_name)/get_planning_scene" />

    <!-- Run the robot within a Gazebo simulation. -->
    <group if="$(arg sim)">

        <!-- Load Gazebo with given values -->
        <include file="$(find iiwa_gazebo)/launch/iiwa_gazebo.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)"/>
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)"/>
        </include>
    </group>

    <!-- Working with the real robot.  -->
    <group ns="$(arg robot_name)" unless="$(arg sim)">

        <!-- Load controllers accordingly to parameters -->
        <include file="$(find iiwa_control)/launch/iiwa_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="joint_state_controller $(arg hardware_interface)_trajectory_controller" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
        </include>

        <!-- Robot interface -->
        <include file="$(find iiwa_hw)/launch/iiwa_hw.launch" >
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
        </include>

    </group>

    <!-- Load move_group -->
    <group ns="$(arg robot_name)">
        <include file="$(find iiwa_moveit)/launch/move_group.launch">
            <arg name="publish_monitored_planning_scene" value="true" />
            <arg name="hardware_interface" value="$(arg hardware_interface)"/>
            <arg name="robot_name" value="$(arg robot_name)"/>
            <arg name="model" value="$(arg model)" />
        </include>

        <include if="$(arg rviz)" file="$(find iiwa_moveit)/launch/moveit_rviz.launch">
            <arg name="config" value="true"/>
        </include>
    </group>




    <!--<group ns="$(arg camera_name)">-->
        <!--<node pkg="tf" type="static_transform_publisher" name="pylon_camera" args="-1.3 -0.3 1.3 1.570796 3.14159 1.22173 world pylon_camera 10" />-->
    <!--</group>-->

    <group ns="$(arg camera_name)">
        <node pkg="tf" type="static_transform_publisher" name="pylon_camera" args="-.24 0.2 0 0 0 0 ar_marker_0 world 10" />
    </group>


    <group ns="robot_base">
        <node pkg="tf" type="static_transform_publisher" name="robot_base" args="1.5 -1.5 0.0 0 0 0 map chassis 10" />
    </group>

    <!--<group ns="base">-->
        <!--<node pkg="tf" type="static_transform_publisher" name="base" args="0.2 0.24 0.0 0 0 0 map chassis 10" />-->
    <!--</group>-->

    <group ns="base_to_base">
        <node pkg="tf" type="static_transform_publisher" name="base_to_base" args="0 0 0 0 0 0 world map 10" />
    </group>

    <!--<group ns="plato_ball">-->
        <!--<node pkg="tf" type="static_transform_publisher" name="plato_ball" args="1.5 -1.1 0.5 0 0 0 world plato_ball 10" />-->
    <!--</group>-->

</launch>
